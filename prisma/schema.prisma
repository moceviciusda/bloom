// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    organizations      UsersOnOrganizations[]
    ownedOrganizations Organization[]         @relation(name: "OrganizationOwner")
    matrices           UsersOnMatrices[]
    skills             SkillsOnUsers[]
    approved           SkillAproval[]
}

model OrganizationSecret {
    id             String       @id @default(cuid())
    secret         String       @unique
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model Organization {
    id          String                 @id @default(cuid())
    name        String
    slug        String                 @unique
    image       String?
    ownerId     String
    owner       User                   @relation(name: "OrganizationOwner", fields: [ownerId], references: [id], onDelete: Cascade)
    members     UsersOnOrganizations[]
    secrets     OrganizationSecret[]
    invitations Invitation[]
    matrices    Matrix[]

    @@index([slug])
}

model UsersOnOrganizations {
    joinedAt       DateTime     @default(now())
    isActive       Boolean      @default(true)
    lastActive     DateTime     @default(now())
    role           Role         @default(USER)
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@id([userId, organizationId])
    @@unique([userId, organizationId])
}

enum Role {
    USER
    ADMIN
    OWNER
}

model Invitation {
    id             String       @id @default(cuid())
    email          String
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    expires        DateTime
}

model UsersOnMatrices {
    createdAt   DateTime    @default(now())
    permissions Permissions @default(VIEWER)
    userId      String
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    matrixId    String
    matrix      Matrix      @relation(fields: [matrixId], references: [id], onDelete: Cascade)

    @@id([userId, matrixId])
    @@unique([userId, matrixId])
}

enum Permissions {
    VIEWER
    EDITOR
    OWNER
}

model Matrix {
    id               String            @id @default(cuid())
    name             String
    slug             String
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    users            UsersOnMatrices[]
    organizationSlug String
    organization     Organization      @relation(fields: [organizationSlug], references: [slug], onDelete: Cascade)
    categories       MatrixCategory[]
    categoryOrder    String[]          @default([])

    @@unique([organizationSlug, slug])
    @@index([slug])
}

model MatrixCategory {
    id          String             @id @default(cuid())
    name        String
    matrixId    String
    matrix      Matrix             @relation(fields: [matrixId], references: [id], onDelete: Cascade)
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
    competences MatrixCompetence[]
    weight      Int                @default(1)

    @@index([matrixId])
}

model MatrixCompetence {
    id         String                @id @default(cuid())
    name       String
    categoryId String
    category   MatrixCategory        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    createdAt  DateTime              @default(now())
    updatedAt  DateTime              @updatedAt
    weight     Int                   @default(1)
    skills     SkillsOnCompetences[]

    @@index([categoryId])
}

model Skill {
    id          String                @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime              @default(now())
    createdById String
    updatedAt   DateTime              @updatedAt
    updatedById String
    competences SkillsOnCompetences[]
    users       SkillsOnUsers[]
}

model SkillsOnCompetences {
    id           String           @id @default(cuid())
    skillId      String
    skill        Skill            @relation(fields: [skillId], references: [id], onDelete: Cascade)
    competenceId String
    competence   MatrixCompetence @relation(fields: [competenceId], references: [id], onDelete: Cascade)
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    weight       Int              @default(1)

    @@unique([skillId, competenceId])
}

model SkillsOnUsers {
    id        String         @id @default(cuid())
    userId    String
    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    skillId   String
    skill     Skill          @relation(fields: [skillId], references: [id], onDelete: Cascade)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    approved  SkillAproval[]

    @@unique([userId, skillId])
}

model SkillAproval {
    id           String        @id @default(cuid())
    userSkill    SkillsOnUsers @relation(fields: [userSkillId], references: [id], onDelete: Cascade)
    userSkillId  String
    approvedById String
    approvedBy   User          @relation(fields: [approvedById], references: [id], onDelete: Cascade)
    approvedAt   DateTime      @default(now())

    @@unique([userSkillId, approvedById])
}
